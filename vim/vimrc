" -----------------------------------------------------
" Plugin Manager
" -----------------------------------------------------

call plug#begin('~/.vim/bundle')

" Re-enable vimball support after plugin manager kills it
Plug 'vim-scripts/Vimball'
" Git wrapper
Plug 'tpope/vim-fugitive'
" Quickly navigate around a file
Plug 'Lokaltog/vim-easymotion'
" faster creation of HTML and CSS, handles expansion
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" Quickly find a file in a project
" Command-T doesn't seem to prioritize exact string matches, which makes it
" seemingly useless.  Will figure whether I'm using it wrong in the future
" Plug 'wincent/Command-T'
" Quickly find a file in a project
Plug 'ctrlpvim/ctrlp.vim'
" Mustache template support
Plug 'mustache/vim-mode'
" less CSS preprocessor syntax highlighting
Plug 'groenewege/vim-less'
" mustache syntax highlighting and completion
Plug 'juvenn/mustache.vim'
" jshint support for vim
Plug 'Shutnik/jshint2.vim'
" hierarchical file tree for Vim
Plug 'scrooloose/nerdtree'
" tab support for NERDTree
Plug 'jistr/vim-nerdtree-tabs'
" NERD commenter
Plug 'scrooloose/nerdcommenter'
" Run a command or shell in a Vim window
" Plug 'pthrasher/conqueterm-vim'
" show git diff marks (disabled - slow and conflicts with VimOrganizer) (using vim-signify instead)
" Plug 'airblade/vim-gitgutter'
" show VCS diff marks
Plug 'mhinz/vim-signify'
" Magit
Plug 'jreybert/vimagit'
" nice looking status bar
Plug 'bling/vim-airline'
" set shiftwidth and expandtab automatically based on file or other files in the working directory
Plug 'tpope/vim-sleuth'
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-session'
" Plug 'bling/vim-bufferline'
" syntax checking in vim
Plug 'scrooloose/syntastic'
" a tree of undos
Plug 'mbbill/undotree'
" allows editing multiple lines simultaneous like Sublime
Plug 'hlissner/vim-multiedit'
" See code tags in side bar
if !has('nvim')
  " crashes in neovim
  " See: https://github.com/majutsushi/tagbar/issues/386
  " See: https://github.com/neovim/neovim/issues/5817
  Plug 'majutsushi/tagbar'
endif
" grep-style functionality through ack
Plug 'mileszs/ack.vim'
" NERDTree integration with ack
Plug 'tyok/nerdtree-ack'
" recursive multiple file diff
Plug 'vim-scripts/DirDiff.vim'
" markdown syntax highlighting
Plug 'plasticboy/vim-markdown'
" vim tmux integration
Plug 'christoomey/vim-tmux-navigator'
" vim-tmux focus events
Plug 'tmux-plugins/vim-tmux-focus-events'
" integration with tmux clipboard
Plug 'roxma/vim-tmux-clipboard'
" stylus syntax highlighting
Plug 'wavded/vim-stylus'
" JavaScript syntax highlighting
Plug 'jelera/vim-javascript-syntax'
" Additional JavaScript syntax highlighting
Plug 'pangloss/vim-javascript'
" Highlighting for javascript indentation
Plug 'nathanaelkane/vim-indent-guides'
" Automatic closing quotes, brackets, etc
Plug 'Raimondi/delimitMate'
" Tab completion
" Plug 'ervandew/supertab'
" Tab completion - Currently leaves around ycmd processes because
" vim-nerdtree-tabs is breaking VimLeave in NeoVim
" See: https://github.com/Valloric/YouCompleteMe/issues/2403
Plug 'Valloric/YouCompleteMe'
" C++ Completion
Plug 'Rip-Rip/clang_complete'
" Auto complete popup for local vars
Plug 'vim-scripts/AutoComplPop'
" Code snippets
Plug 'SirVer/ultisnips'
" Better completion with YouCompleteMe
Plug 'marijnh/tern_for_vim'
" asynchronous completion
Plug 'Shougo/deoplete.nvim'
" tern js plugin for deoplete
Plug 'carlitux/deoplete-ternjs'
" GLSL syntax highlighting
Plug 'tikhomirov/vim-glsl'
" Universal Text Linking
Plug 'vim-scripts/utl.vim'
" Repeat
Plug 'tpope/vim-repeat'
" Speeddating
Plug 'tpope/vim-speeddating'
" Calendar
Plug 'mattn/calendar-vim'
" SyntaxRange
Plug 'vim-scripts/SyntaxRange'
" Org Mode
" Plug 'jceb/vim-orgmode'
Plug 'hsitz/VimOrganizer'
" Vimwiki
Plug 'vimwiki/vimwiki'
" Huge Files
Plug 'mhinz/vim-hugefile'
" Hacker News
Plug 'ryanss/vim-hackernews'
" Man page viewer
Plug 'vim-utils/vim-man'
" delete surrounding tags (dst)
Plug 'tpope/vim-surround'
" vim-scripts repos
Plug 'L9'
Plug 'FuzzyFinder'
" todo.txt
Plug 'freitass/todo.txt-vim'
"  lldb integration
" Plug 'gilligan/vim-lldb'        " BROKEN - doesn't set breakpoints properly; Doesn't stop at breakpoints when set manually with just line number and filename
" Plug 'critiqjo/lldb.nvim'       " BROKEN - doesn't set breakpoints properly; Doesn't stop at breakpoints when set manually with just line number and filename
" gdb integration
" Plug 'pyclewn'                  " UI kind of broken - loads things into NERDTree.  May be worth a revisit, for example turning off NERDTree when running
" Plug 'vim-scripts/Conque-GDB'   " Too simple - doesn't do much beyond a normal debugger
" interactive debugger and its dependency for interactive command execution
Plug 'Shougo/vimproc.vim'
Plug 'idanarye/vim-vebugger'      " Only debugger that seems to work at all, but very shitty
" Color Schemes
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
Plug 'snowcrshd/cyberpunk.vim'
Plug 'aliou/moriarty.vim'
Plug 'roosta/srcery'
Plug 'shaond/vim-guru'
Plug 'sjl/badwolf'
Plug '29decibel/codeschool-vim-theme'
Plug 'vim-scripts/phd'

call plug#end()

" -----------------------------------------------------
" Setup
" -----------------------------------------------------

if has("unix")
  let s:uname = substitute(system("uname -s"), '\n', '', '')
else
  let s:uname = 'unknown'
endif

" -----------------------------------------------------
" Use UTF-8
" -----------------------------------------------------
set fencs=ucs-bom
set enc=utf-8

" -----------------------------------------------------
" General settings
" -----------------------------------------------------

set nocompatible     " Be iMproved
set exrc             " enable per-directory .vimrc files
set secure           " disable unsafe commands in local .vimrc files
set pastetoggle=<F10> " use F10 to disable and enable all indentation options
set clipboard=unnamedplus " Set system clipboard as default"
set viminfo='20,<1000,s1000 " increase copy and paste buffer size
set mouse=a          " enable mouse support in xterm
" Enable scrolloff to always keep the cursor vertically centered
" set scrolloff=999
let mapleader=" "
let maplocalleader=" "

" - enables filetype detection,
" - enables filetype-specific scripts (ftplugins),
" - enables filetype-specific indent scripts.
" Things like ctrl-w ctrl-] won't find custom ctag files without this
filetype plugin indent on

" -----------------------------------------------------
" Backspace settings
"   indent  allow backspacing over autoindent
"   eol     allow backspacing over line breaks (join lines)
"   start   allow backspacing over the start of insert; CTRL-W and CTRL-U
"   0     same as ":set backspace=" (Vi compatible)
"   1     same as ":set backspace=indent,eol"
"   2     same as ":set backspace=indent,eol,start"
" -----------------------------------------------------

set bs=2

" -----------------------------------------------------
" Indentation  settings
" -----------------------------------------------------

set tabstop=2       " number of spaces a tab counts for
set shiftwidth=2    " control how many columns text is indented with the reindent operations (<< and >>) and automatic C-style indentation.
set expandtab       " Insert spaces when entering <Tab>
set softtabstop=2   " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.  It "feels" like a tab though
set ai              " auto indent

" Indentation per file type
au FileType javascript setl ts=4 sw=4 sts=4
au FileType python setl ts=4 sw=4 sts=4
au FileType cpp setl ts=4 sw=4 sts=4
au FileType hpp setl ts=4 sw=4 sts=4

" -----------------------------------------------------
" Look and feel
" -----------------------------------------------------

syn on            " syntax highlighting
set bg=dark       " set colors for dark background
" set termguicolors " true color
set nonumber      " don't display row numbers
set ruler         " display ruler
set vb t_vb=      " visual bell
set visualbell
set noerrorbells

" -----------------------------------------------------
" External commands
" -----------------------------------------------------

if s:uname == "Darwin"
  nnoremap <Leader>o :exe ':silent !open %'<CR>
endif

" FormatJSON to pretty print JSON
com! FormatJSON %!python -m json.tool

" -----------------------------------------------------
" Huge file handling
" -----------------------------------------------------

" in MiB
let g:hugefile_trigger_size = 1

" -----------------------------------------------------
" Syntax Checking
" -----------------------------------------------------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_args = '--quiet'
let g:syntastic_html_tidy_exec = 'tidy5 config ~/tidy-config.txt'
let g:syntastic_html_tidy_ignore_errors = ['discarding unexpected <', '> is not recognized']
let g:syntastic_html_checkers = ['tidy', 'eslint']
let g:syntastic_html_eslint_args = '--quiet'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_pylint_post_args="--max-line-length=120"

" -----------------------------------------------------
" Special syntax highlighting
" -----------------------------------------------------

fun! UpdateFileTypes()
  if expand('%:t') =~ '.clang-format'
    set ft=yaml
  endif
endfun

autocmd BufEnter * call UpdateFileTypes()

" -----------------------------------------------------
" Line length highlight
" -----------------------------------------------------

fun! ShowLineLengthBoundary()
  " Don't highlight on these filetypes
  if &ft =~ 'markdown\|text\|bash\|sh'
    return
  elseif expand('%:t') !~ '\.'
    " No file extension
    return
  elseif expand('%:t') =~ '.vimrc'
    return
  elseif expand('%:t') =~ '.org'
    return
  elseif expand('%:t') =~ '.cpp' || expand('%:t') =~ '.cc' || expand('%:t') =~ '.hpp' || expand('%:t') =~ '.h'
    highlight OverLength ctermbg=52 guibg=#592929
    call matchadd('OverLength', '\%>80v.\+')
  else
    highlight OverLength ctermbg=52 guibg=#592929
    call matchadd('OverLength', '\%>120v.\+')
endif
endfun

augroup vimrc_autocmds
  autocmd BufEnter * call ShowLineLengthBoundary()
augroup END

" -----------------------------------------------------
" Spell checking
" -----------------------------------------------------

setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.txt setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell

" -----------------------------------------------------
" Color scheme
" -----------------------------------------------------
" let g:solarized_termcolors=256   " only needed if terminal is not solarized
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
elseif s:uname == 'Linux'
  set t_Co=256
endif
try
  " colorscheme solarized
  colorscheme gruvbox
catch /^Vim\%((\a\+)\)\=:E185/
  " deal with it
endtry

" -----------------------------------------------------
" Fold settings
"
"   fdm:
"     manual     Folds are created manually.
"     indent     Lines with equal indent form a fold.
"     expr       'foldexpr' gives the fold level of a line.
"     marker     Markers are used to specify folds.
"     syntax     Syntax highlighting items specify folds.
"     diff       Fold text that is not changed.
" -----------------------------------------------------

set fdm=marker
hi Folded ctermfg=255 ctermbg=23
"set foldmethod=indent
"set foldlevelstart=0
" javascript folding doesn't work very well with several levels of nested anonymous functions
"let javaScript_fold=1         " JavaScript
"let php_folding=1             " PHP
let g:vim_markdown_folding_disabled=1

" -----------------------------------------------------
" Remove trailing whitespace from certain file types
" -----------------------------------------------------

autocmd BufWritePre *.js :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.jade :%s/\s\+$//e
autocmd BufWritePre *.css :%s/\s\+$//e
autocmd BufWritePre *.less :%s/\s\+$//e
autocmd BufWritePre *.php :%s/\s\+$//e
autocmd BufWritePre *.phtml :%s/\s\+$//e
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.sh :%s/\s\+$//e
autocmd BufWritePre *.c :%s/\s\+$//e
autocmd BufWritePre *.cpp :%s/\s\+$//e
autocmd BufWritePre *.cc :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.hpp :%s/\s\+$//e
autocmd BufWritePre *.md :%s/\s\+$//e
autocmd BufWritePre *.yaml :%s/\s\+$//e
autocmd BufWritePre .vimrc :%s/\s\+$//e

" -----------------------------------------------------
" Highlight unwanted text
" -----------------------------------------------------
"
" can't use "match" keyword directly as each usage overwrites the previous one,
" so use matchadd function, which can be called as much as needed

" Highlight trailing whitespace
autocmd BufEnter * highlight ExtraWhitespace ctermbg=red guibg=red
" TODO: This doesn't seem to highlight spaces after # comments in yaml files...
autocmd BufEnter * call matchadd('ExtraWhitespace', '\s\+$')

" Highlight tabs
autocmd BufEnter * highlight ExtraTabs ctermbg=red guibg=red
autocmd BufEnter * call matchadd('ExtraTabs', '\t\+')

" -----------------------------------------------------
" tags settings
" -----------------------------------------------------

set tags=./tags;,tags;./TAGS;,TAGS;

" -----------------------------------------------------
" cscope settings
" -----------------------------------------------------

if has("cscope")
    set csprg=cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
endif

" -----------------------------------------------------
" Vimdiff settings
" -----------------------------------------------------

" set colors
" cterm - style, cterfg - text color, ctermbg - highlighting
" DiffAdd - added line
" highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffAdd    cterm=bold ctermfg=15 ctermbg=22 gui=none guifg=bg guibg=Red
" DiffDelete - removed line
" highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=15 ctermbg=52 gui=none guifg=bg guibg=Red
" DiffChange - changed line
" highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=223 ctermbg=239 gui=none guifg=bg guibg=Red
" DiffText - part of line that changed
" highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=15 ctermbg=124 gui=none guifg=bg guibg=Red

set diffexpr=MyDiff()
function MyDiff()
  let opt = ""
  if &diffopt =~ "icase"
    let opt = opt . "-i "
  endif
  if &diffopt =~ "iwhite"
    let opt = opt . "-b "
  endif
  silent execute "!diff -d -a --binary " . opt . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction

if &diff
  function! CheckDiff()
    if &modified
      diffupdate
    endif
  endfunction

  autocmd CursorMoved * call CheckDiff()
endif

" -----------------------------------------------------
" Tmux Navigator
" -----------------------------------------------------

if has('nvim') && s:uname == "Darwin"
  " for some reason nvim doesn't map ctrl-h properly
  nmap <bs> :<c-u>TmuxNavigateLeft<cr>
endif

" -----------------------------------------------------
" DelimitMate settings
" -----------------------------------------------------

" " This expands a carriage return into two, but doesn't always behave as expected
" let delimitMate_expand_cr = 2

" -----------------------------------------------------
" JSHint
" -----------------------------------------------------

" Run JSHint on save
" au BufWritePost *.js :JSHint

" -----------------------------------------------------
" command-t
" -----------------------------------------------------

let g:CommandTNeverShowDotFiles = 1
let g:CommandTScanDotDirectories = 0

" -----------------------------------------------------
" YouCompleteMe
" -----------------------------------------------------

" These are the tweaks I apply to YCM's config, you don't need them but they might help.
" YCM gives you popups and splits by default that some people might not like, so these should tidy it up a bit for you.
" let g:ycm_add_preview_to_completeopt=0

" Don't prompt to load ycm conf
let g:ycm_confirm_extra_conf = 0
" Default conf
" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" let g:ycm_collect_identifiers_from_tags_files = 1

" Disable for C++ so that clang_completer can kick in.
" YCM seems slow for clang completion, and also includes a lot more cruft in
" autocomplete popup
let g:ycm_filetype_blacklist = { 'cpp': 1, 'c': 1 }
" Let syntastic handle c/c++ errors rather than YCM
let g:ycm_show_diagnostics_ui = 0

" -----------------------------------------------------
" clang_complete
" -----------------------------------------------------

if s:uname == "Linux"
  let g:clang_library_path='/usr/lib/llvm-3.8/lib'
elseif s:uname == "Darwin"
  let cmd = "brew list llvm | sed -n 1p | sed 's/^\\(.*\\/llvm\\/[^/]*\\).*$/\\1/'"
  let g:clang_library_path = substitute(system(cmd), '\n\+$', '', '') . '/lib'
endif
let g:clang_auto_select = 1
" Complete macros
let g:clang_complete_macros = 1
" Complete code constructs like loops
let g:clang_complete_patterns = 1
let g:clang_snippets = 1
let g:clang_conceal_snippets=1
let g:clang_snippets_engine = 'ultisnips'

" -----------------------------------------------------
" general completion settings
" -----------------------------------------------------

" The following two settings properly select argument completion
set concealcursor=vin
" Don't open preview window
set completeopt-=preview
" Popup menu height
set pumheight=20
"" Hides certain bits of text, like quotes in json files and brackets in markdown links
" set conceallevel=2

" -----------------------------------------------------
" UltiSnips
" -----------------------------------------------------

let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" -----------------------------------------------------
" gitgutter
" -----------------------------------------------------

if exists(":GitGutterLineHighlightsEnable")
  autocmd VimEnter * GitGutterLineHighlightsEnable
endif

" compare against last ancestor commit before branch
let g:gitgutter_diff_args = "`git merge-base HEAD master`"

highlight GitGutterAddLine ctermbg=17
highlight GitGutterChangeLine ctermbg=237
" GitGutterDeleteLine       " default: links to DiffDelete
" GitGutterChangeDeleteLine " default: links to GitGutterChangeLineDefault, i.e. DiffChange

" " gitgutter solarized adjustments
" highlight clear SignColumn
" highlight link SignColumn CursorColumn

" -----------------------------------------------------
" signify
" -----------------------------------------------------

let g:signify_vcs_cmds = {
  \ 'git': 'git diff --no-color --no-ext-diff -U0 master -- %f'
  \ }

highlight SignColumn ctermbg=237

" -----------------------------------------------------
" tagbar config
" -----------------------------------------------------

" open Tagbar for supported files
" autocmd BufEnter * nested :call tagbar#autoopen(0)

let g:tagbar_width = 31
nnoremap <leader>c :TagbarToggle<CR>

" configure tags for javascript
" let g:tagbar_ctags_bin = '~/node_modules/.bin/jsctags'
" let g:tagbar_type_javascript = { 'ctagsbin' : '~/node_modules/.bin/jsctags' }
" let g:tagbar_type_javascript = { 'ctagsbin' : '/Users/erahhal/node_modules/jsctags/bin/jsctags.js' }

" -----------------------------------------------------
" NERDTree config
" -----------------------------------------------------

" Start NERDTreeTabs on launch
autocmd vimenter * NERDTree
let g:nerdtree_tabs_open_on_console_startup = 1
" Show hidden files
let NERDTreeShowHidden=1
" Make sure focus is on buffer
autocmd VimEnter * wincmd p

" -----------------------------------------------------
" Ack config
" -----------------------------------------------------

if s:uname == "Linux"
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
elseif s:uname == "Darwin"
  let g:ackprg="ack -H -s --nocolor --nogroup --column"
endif

" -----------------------------------------------------
" mustache config
" -----------------------------------------------------

let g:mustache_abbreviations = 1

" -----------------------------------------------------
" Remember the last cursor location across sessions
" -----------------------------------------------------

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" -----------------------------------------------------
"  Vebugger
" -----------------------------------------------------

let g:vebugger_leader='<Leader>'

" -----------------------------------------------------
"  Org Mode (vim-orgmode)
" -----------------------------------------------------

" let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier', 'Statement', 'PreProc', 'Type', 'Special']
" " Enabling reverting back to solarized causes a load flicker for every file that is loaded
" " autocmd BufEnter * colorscheme solarized
" autocmd BufEnter *.org colorscheme srcery
" autocmd BufEnter *.org highlight Folded cterm=bold gui=bold
" let g:org_agenda_files=["~/ownCloud/Ellis' Stuff/Documents/agenda.org"]

" -----------------------------------------------------
"  Org Mode (VimOrganizer)
" -----------------------------------------------------

" autocmd BufEnter *.org colorscheme cyberpunk
" autocmd BufEnter *.org highlight Folded cterm=bold gui=bold
let g:agenda_files=["~/ownCloud/Ellis' Stuff/Documents/agenda.org"]
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
au BufEnter *.org            call org#SetOrgFileType()

" -----------------------------------------------------
"  Vimwiki
" -----------------------------------------------------

let g:vimwiki_list = [{'path': '~/Documents/ellis/wiki/', 'index': 'index'}]

" -----------------------------------------------------
"  tagbar
" -----------------------------------------------------

if !has('nvim') && !&diff
  autocmd BufEnter * nested :call tagbar#autoopen(1)
endif
