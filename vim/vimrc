" -----------------------------------------------------
" Vundle
" -----------------------------------------------------
"
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" My bundles here:
"
" original repos on GitHub

" Git wrapper
Plugin 'tpope/vim-fugitive'
" Quickly navigate around a file
Plugin 'Lokaltog/vim-easymotion'
" faster creation of HTML and CSS, handles expansion
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Quickly find a file in a project
" Command-T doesn't seem to prioritize exact string matches, which makes it
" seemingly useless.  Will figure whether I'm using it wrong in the future
" Plugin 'wincent/Command-T' 
" Quickly find a file in a project
Plugin 'ctrlpvim/ctrlp.vim'
" Mustache template support
Plugin 'mustache/vim-mode'
" less CSS preprocessor syntax highlightin
Plugin 'groenewege/vim-less' 
" mustache syntax highlighting and completion
Plugin 'juvenn/mustache.vim' 
" jshint support for vim
Plugin 'Shutnik/jshint2.vim' 
" hierarchical file tree for Vim
Plugin 'scrooloose/nerdtree' 
" tab support for NERDTree
Plugin 'jistr/vim-nerdtree-tabs' 
" NERD commenter
Plugin 'scrooloose/nerdcommenter' 
" Run a command or shell in a Vim window
" Plugin 'pthrasher/conqueterm-vim' 
" show git diff marks (disabled - slow and conflicts with VimOrganizer) (using vim-signify instead)
" Plugin 'airblade/vim-gitgutter' 
" show VCS diff marks
Plugin 'mhinz/vim-signify'
" nice looking status bar
Plugin 'bling/vim-airline' 
" set shiftwidth and expandtab automatically based on file or other files in the working directory
Plugin 'tpope/vim-sleuth' 
" Plugin 'xolox/vim-misc'
" Plugin 'xolox/vim-session'
" Plugin 'bling/vim-bufferline'
" syntax checking in vim
Plugin 'scrooloose/syntastic' 
" a tree of undos
Plugin 'mbbill/undotree' 
" allows editing multiple lines simultaneous like Sublime
Plugin 'hlissner/vim-multiedit' 
" See code tags in side bar - seems to be crashing
" Plugin 'majutsushi/tagbar'
" grep-style functionality through ack
Plugin 'mileszs/ack.vim'
" NERDTree integration with ack
Plugin 'tyok/nerdtree-ack'
" recursive multiple file diff
Plugin 'vim-scripts/DirDiff.vim'
" markdown syntax highlighting
Plugin 'plasticboy/vim-markdown'
" vim tmux integration
Plugin 'christoomey/vim-tmux-navigator'
" vim-tmux focus events
Plugin 'tmux-plugins/vim-tmux-focus-events'
" integration with tmux clipboard
Plugin 'roxma/vim-tmux-clipboard'
" stylus syntax highlighting
Plugin 'wavded/vim-stylus'
" JavaScript syntax highlighting
Plugin 'jelera/vim-javascript-syntax'
" Additional JavaScript syntax highlighting
Plugin 'pangloss/vim-javascript'
" Highlighting for javascript indentation
Plugin 'nathanaelkane/vim-indent-guides'
" Automatic closing quotes, brackets, etc
Plugin 'Raimondi/delimitMate'
" Tab completion
Plugin 'ervandew/supertab'
" Tab completion - Currently leaves around ycmd processes because
" vim-nerdtree-tabs is breaking VimLeave in NeoVim
" See: https://github.com/Valloric/YouCompleteMe/issues/2403
Plugin 'Valloric/YouCompleteMe'
" C++ Completion
Plugin 'Rip-Rip/clang_complete'
" Code snippets
Plugin 'SirVer/ultisnips'
" Better completion with YouCompleteMe
Plugin 'marijnh/tern_for_vim'
" asynchronous completion
Plugin 'Shougo/deoplete.nvim'
" tern js plugin for deoplete
Plugin 'carlitux/deoplete-ternjs'
" GLSL syntax highlighting
Plugin 'tikhomirov/vim-glsl'
" Universal Text Linking
Plugin 'vim-scripts/utl.vim'
" Repeat
Plugin 'tpope/vim-repeat'
" Speeddating
Plugin 'tpope/vim-speeddating'
" Calendar
Plugin 'mattn/calendar-vim'
" SyntaxRange
Plugin 'vim-scripts/SyntaxRange'
" Org Mode
" Plugin 'jceb/vim-orgmode'
Plugin 'hsitz/VimOrganizer'
" Vimwiki
Plugin 'vimwiki/vimwiki'
" Huge Files
Plugin 'mhinz/vim-hugefile'
" Hacker News
Plugin 'ryanss/vim-hackernews'
" Man page viewer
Plugin 'vim-utils/vim-man'
" delete surrounding tags (dst)
Plugin 'tpope/vim-surround'
" interactive command execution (vim-debugger dependency)
Plugin 'Shougo/vimproc.vim'
" interactive debugger
Plugin 'idanarye/vim-vebugger'
" vim-scripts repos
Plugin 'L9'
Plugin 'FuzzyFinder'
" todo.txt
Plugin 'freitass/todo.txt-vim'
" Color Schemes
Plugin 'altercation/vim-colors-solarized' 
Plugin 'morhetz/gruvbox'
Plugin 'snowcrshd/cyberpunk.vim'
Plugin 'aliou/moriarty.vim'
Plugin 'roosta/srcery'
Plugin 'shaond/vim-guru'
Plugin 'sjl/badwolf'
Plugin '29decibel/codeschool-vim-theme'
Plugin 'vim-scripts/phd'
" Git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///Users/gmarik/path/to/plugin'
" ...

call vundle#end()

filetype plugin indent on     " required! this uses plugin indentation.
" filetype indent on     " required! this does NOT use plugin indentation
"
" Brief help
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install (update) bundles
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin commands are not allowed.

" -----------------------------------------------------
" Setup
" -----------------------------------------------------

if has("unix")
  let s:uname = substitute(system("uname -s"), '\n', '', '')
elseif 
else
  let s:uname = 'unknown'
endif

" -----------------------------------------------------
" Use UTF-8
" -----------------------------------------------------
set fencs=ucs-bom
set enc=utf-8

" -----------------------------------------------------
" General settings
" -----------------------------------------------------

set nocompatible     " Be iMproved
set exrc             " enable per-directory .vimrc files
set secure           " disable unsafe commands in local .vimrc files
set pastetoggle=<F10> " use F10 to disable and enable all indentation options
set clipboard=unnamedplus " Set system clipboard as default"
set viminfo='20,<1000,s1000 " increase copy and paste buffer size
" Enable scrolloff to always keep the cursor vertically centered
" set scrolloff=999
let mapleader=" "
let maplocalleader=" "

" -----------------------------------------------------
" External commands
" -----------------------------------------------------

if s:uname == "Darwin"
  nnoremap <Leader>o :exe ':silent !open %'<CR>
endif

" FormatJSON to pretty print JSON
com! FormatJSON %!python -m json.tool

" -----------------------------------------------------
" Look and feel
" -----------------------------------------------------

syn on            " syntax highlighting
set bg=dark       " set colors for dark background
" set termguicolors " true color
set nonumber      " don't display row numbers
set ruler         " display ruler
set vb t_vb=      " visual bell
set visualbell
set noerrorbells

" -----------------------------------------------------
" Huge file handling
" -----------------------------------------------------

" in MiB
let g:hugefile_trigger_size = 1

" -----------------------------------------------------
" Syntax Checking
" -----------------------------------------------------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_args = '--quiet'
let g:syntastic_html_tidy_exec = 'tidy5 config ~/tidy-config.txt'
let g:syntastic_html_tidy_ignore_errors = ['discarding unexpected <', '> is not recognized']
let g:syntastic_html_checkers = ['tidy', 'eslint']
let g:syntastic_html_eslint_args = '--quiet'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_pylint_post_args="--max-line-length=120"

" -----------------------------------------------------
" Line length highlight
" -----------------------------------------------------

fun! ShowLineLengthBoundary()
  " Don't highlight on these filetypes
  if &ft =~ 'markdown\|text\|bash\|sh'
    return
  endif
  if expand('%:t') =~ 'Dockerfile'
    return
  endif
  if expand('%:t') =~ '.vimrc'
    return
  endif
  if expand('%:t') =~ 'fstab'
    return
  endif
  if expand('%:t') =~ '.org'
    return
  endif
  highlight OverLength ctermbg=red guibg=#592929
  match OverLength /\%>120v.\+/
endfun

augroup vimrc_autocmds
  autocmd BufEnter * call ShowLineLengthBoundary()
augroup END

" -----------------------------------------------------
" Spell checking
" -----------------------------------------------------

au BufRead *.txt setlocal spell
au BufRead *.md setlocal spell

" -----------------------------------------------------
" Color scheme
" -----------------------------------------------------
" let g:solarized_termcolors=256   " only needed if terminal is not solarized
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
elseif s:uname == 'Linux'
  set t_Co=256
endif
try
  " colorscheme solarized
  colorscheme gruvbox
catch /^Vim\%((\a\+)\)\=:E185/
  " deal with it
endtry

" -----------------------------------------------------
" Backspace settings
"   indent  allow backspacing over autoindent
"   eol     allow backspacing over line breaks (join lines)
"   start   allow backspacing over the start of insert; CTRL-W and CTRL-U
"   0     same as ":set backspace=" (Vi compatible)
"   1     same as ":set backspace=indent,eol"
"   2     same as ":set backspace=indent,eol,start"
" -----------------------------------------------------

set bs=2

" -----------------------------------------------------
" Indentation  settings
" -----------------------------------------------------

set tabstop=2       " number of spaces a tab counts for
set shiftwidth=2    " control how many columns text is indented with the reindent operations (<< and >>) and automatic C-style indentation.
set expandtab       " Insert spaces when entering <Tab>
set softtabstop=2   " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.  It "feels" like a tab though
set ai              " auto indent

" Indentation per file type
au FileType javascript setl ts=4 sw=4 sts=4
au FileType python setl ts=4 sw=4 sts=4
au FileType cpp setl ts=4 sw=4 sts=4
au FileType hpp setl ts=4 sw=4 sts=4

" -----------------------------------------------------
" Fold settings
"
"   fdm:
"     manual	    Folds are created manually.
"     indent	    Lines with equal indent form a fold.
"     expr	    'foldexpr' gives the fold level of a line.
"     marker	    Markers are used to specify folds.
"     syntax	    Syntax highlighting items specify folds.
"     diff	    Fold text that is not changed.
" -----------------------------------------------------

set fdm=marker
hi Folded ctermfg=255 ctermbg=23
"set foldmethod=indent
"set foldlevelstart=0
" javascript folding doesn't work very well with several levels of nested anonymous functions
"let javaScript_fold=1         " JavaScript
"let php_folding=1             " PHP
let g:vim_markdown_folding_disabled=1

" -----------------------------------------------------
" Remove trailing whitespace from certain file types
" -----------------------------------------------------

autocmd BufWritePre *.js :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.jade :%s/\s\+$//e
autocmd BufWritePre *.css :%s/\s\+$//e
autocmd BufWritePre *.less :%s/\s\+$//e
autocmd BufWritePre *.php :%s/\s\+$//e
autocmd BufWritePre *.phtml :%s/\s\+$//e
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.sh :%s/\s\+$//e
autocmd BufWritePre *.c :%s/\s\+$//e
autocmd BufWritePre *.cpp :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.hpp :%s/\s\+$//e

" -----------------------------------------------------
" tags settings
" -----------------------------------------------------

set tags=./tags;,tags;./TAGS;,TAGS;

" -----------------------------------------------------
" cscope settings
" -----------------------------------------------------

if has("cscope")
    set csprg=cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
endif

" -----------------------------------------------------
" Vimdiff settings
" -----------------------------------------------------

" ignore whitespace
set diffopt+=iwhite

" set colors
" cterm - style, cterfg - text color, ctermbg - highlighting
" DiffAdd - added line
" highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffAdd    cterm=bold ctermfg=15 ctermbg=22 gui=none guifg=bg guibg=Red
" DiffDelete - removed line
" highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=15 ctermbg=52 gui=none guifg=bg guibg=Red
" DiffChange - changed line
" highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=223 ctermbg=239 gui=none guifg=bg guibg=Red
" DiffText - part of line that changed
" highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=15 ctermbg=124 gui=none guifg=bg guibg=Red

" -----------------------------------------------------
" DelimitMate settings
" -----------------------------------------------------

" " This expands a carriage return into two, but doesn't always behave as expected 
" let delimitMate_expand_cr = 2

" -----------------------------------------------------
" JSHint
" -----------------------------------------------------

" Run JSHint on save
" au BufWritePost *.js :JSHint

" -----------------------------------------------------
" command-t
" -----------------------------------------------------

let g:CommandTNeverShowDotFiles = 1
let g:CommandTScanDotDirectories = 0

" -----------------------------------------------------
" YouCompleteMe
" -----------------------------------------------------

" These are the tweaks I apply to YCM's config, you don't need them but they might help.
" YCM gives you popups and splits by default that some people might not like, so these should tidy it up a bit for you.
" let g:ycm_add_preview_to_completeopt=0
" set completeopt-=preview

" Don't prompt to load ycm conf
let g:ycm_confirm_extra_conf = 0
" Default conf
" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" let g:ycm_collect_identifiers_from_tags_files = 1

" Disable for C++ so that clang_completer can kick in
let g:ycm_filetype_blacklist = { 'cpp': 1 }
" Let syntastic handle errors rather than YCM
let g:ycm_show_diagnostics_ui = 0

" -----------------------------------------------------
" clang_complete
" -----------------------------------------------------

if s:uname == "Linux"
  let g:clang_library_path='/usr/lib/llvm-3.8/lib'
endif


" -----------------------------------------------------
" gitgutter
" -----------------------------------------------------

if exists(":GitGutterLineHighlightsEnable")
  autocmd VimEnter * GitGutterLineHighlightsEnable
endif

" compare against last ancestor commit before branch
let g:gitgutter_diff_args = "`git merge-base HEAD master`"

highlight GitGutterAddLine ctermbg=17
highlight GitGutterChangeLine ctermbg=237
" GitGutterDeleteLine       " default: links to DiffDelete
" GitGutterChangeDeleteLine " default: links to GitGutterChangeLineDefault, i.e. DiffChange

" " gitgutter solarized adjustments
" highlight clear SignColumn
" highlight link SignColumn CursorColumn

" -----------------------------------------------------
" signify
" -----------------------------------------------------

let g:signify_vcs_cmds = {
  \ 'git': 'git diff --no-color --no-ext-diff -U0 master -- %f'
  \ }

highlight SignColumn ctermbg=237

" -----------------------------------------------------
" tagbar config
" -----------------------------------------------------

" open Tagbar for supported files
" autocmd BufEnter * nested :call tagbar#autoopen(0)

let g:tagbar_width = 31
nnoremap <leader>c :TagbarToggle<CR> 

" configure tags for javascript
" let g:tagbar_ctags_bin = '~/node_modules/.bin/jsctags'
" let g:tagbar_type_javascript = { 'ctagsbin' : '~/node_modules/.bin/jsctags' }
" let g:tagbar_type_javascript = { 'ctagsbin' : '/Users/erahhal/node_modules/jsctags/bin/jsctags.js' }

" -----------------------------------------------------
" NERDTree config
" -----------------------------------------------------

" Start NERDTreeTabs on launch
let g:nerdtree_tabs_open_on_console_startup = 1
" Show hidden files
let NERDTreeShowHidden=1

" -----------------------------------------------------
" Ack config
" -----------------------------------------------------

if s:uname == "Linux"
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
elseif s:uname == "Darwin"
  let g:ackprg="ack -H -s --nocolor --nogroup --column"
endif

" -----------------------------------------------------
" mustache config
" -----------------------------------------------------

let g:mustache_abbreviations = 1

" -----------------------------------------------------
" Remember the last cursor location across sessions
" -----------------------------------------------------

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" -----------------------------------------------------
"  Vebugger
" -----------------------------------------------------

let g:vebugger_leader=' v'

" -----------------------------------------------------
"  Org Mode (vim-orgmode)
" -----------------------------------------------------

" let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier', 'Statement', 'PreProc', 'Type', 'Special']
" " Enabling reverting back to solarized causes a load flicker for every file that is loaded
" " autocmd BufEnter * colorscheme solarized
" autocmd BufEnter *.org colorscheme srcery
" autocmd BufEnter *.org highlight Folded cterm=bold gui=bold
" let g:org_agenda_files=["~/ownCloud/Ellis' Stuff/Documents/agenda.org"]

" -----------------------------------------------------
"  Org Mode (VimOrganizer)
" -----------------------------------------------------

" autocmd BufEnter *.org colorscheme cyberpunk
" autocmd BufEnter *.org highlight Folded cterm=bold gui=bold
let g:agenda_files=["~/ownCloud/Ellis' Stuff/Documents/agenda.org"]
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org 
au BufEnter *.org            call org#SetOrgFileType()

" -----------------------------------------------------
"  Vimwiki
" -----------------------------------------------------

let g:vimwiki_list = [{'path': '~/Documents/ellis/wiki/', 'index': 'index'}]
