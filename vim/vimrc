" -----------------------------------------------------
" Notes
" -----------------------------------------------------

" :help     - Help for VIM
" ctrl-]    - Go to section in VIM help
"
" Motion
" --------
" http://vimdoc.sourceforge.net/htmldoc/motion.html
"
" ctrl-o    - back
" ctrl-i    - forward
" :jumps    - history
"
" .         - REPEAT AN OPERATION!
" :retab    - convert tabs to spaces
" gf        - Go to file (e.g. C++ header)
" ^wf       - Go to file in new pane
" ^wgf      - Go to file in new tab
" ~         - Swap case
" g~        - Swap case for <modifier>
" gu        - Lower case
" gU        - Upper case
" %         - Move to matching item for bracket under or after cursor.
" [(        - go to [count] previous unmatched '('.
" [{        - go to [count] previous unmatched '{'.
" ])        - go to [count] next unmatched ')'.
" ]}        - go to [count] next unmatched '}'.
" )         - go [count] sentences forward.
" (         - go [count] sentences backward.
" }         - go [count] paragraphs forward.
" {         - go [count] paragraphs backward.
" ]]        - [count] sections forward or to the next '{' in the first column.
" ][        - [count] sections forward or to the next '}' in the first column.
" [[        - [count] sections backward or to the previous '{' in the first column.
" []        - [count] sections backward or to the previous '}' in the first column.
" ]m        - Go to [count] next start of a method (for Java or similar structured language)
" ]M        - Go to [count] next end of a method (for Java or similar structured language)
" [m        - Go to [count] previous start of a method (for Java or similar structured language)
" [M        - Go to [count] previous end of a method (for Java or similar structured language)
" [* or [/  - go to [count] previous start of a C comment "/*".
" ]* or ]/  - go to [count] next end of a C comment "*/".
" m{a-zA-Z} - Set mark {a-zA-Z} at cursor position
" '{a-zA-Z} - Jump to mark
" m' or m`  - Set the previous context mark.
" '' or ''  - Jump to previous context mark.
" H         - Jump to top of window.
" M         - Jump to middle of window.
" L         - Jump to bottom of window.
" zz        - recenter window.
" :'<,'>    - visual selection as range.  So type : with a selection then do a s/// search/replace
" yiw       - yank word
" yi"       - yank between quotes
" yiW       - yank to surrounding spaces
" viw       - select word under cursor
" viwp      - select word then replace
" vi"p      - select between quotes and replace
" viw"0p    - select word then replace with first selection rather than last replaced word
" :cn       - next in quickfix list
" :cp       - previous in quickfix list
" :copen    - open quickfix list
" :ccl      - close quickfix list
"
" Search and Replace in files
" ---------------------------
" Select files first:
" :args **/*.js
" :args `find . -type f`
"
" then search and replace:
" :argdo %s/search/replace/g
" :bufdo
" :windo
" :tabdo
"
" Using quickfix list, select files:
" :grep blah -r **/*.txt
" (or "ms" search in NERDTree)
"
" then search and replace, save, then close all buffers:
" :cfdo %s/from/to/g | update
" :cfdo :bd

" =====================================================
" SECTION: Vanilla VIM Settings
" =====================================================

" -----------------------------------------------------
" OS Detection
" -----------------------------------------------------

if has("unix")
    let s:uname = substitute(system("uname -s"), '\n', '', '')
    let s:ubuntu_version = substitute(system("lsb_release -a | grep Release | awk '{ print $2 }'"), '\n', '', '')
else
    let s:uname = 'unknown'
endif

" -----------------------------------------------------
" Use UTF-8
" -----------------------------------------------------

set fencs=ucs-bom
set enc=utf-8

" -----------------------------------------------------
" General settings
" -----------------------------------------------------

let mapleader=" "                       " Set leader
let maplocalleader=" "                  " Set local leader
set exrc                                " enable per-directory .vimrc files
set secure                              " disable unsafe commands in local .vimrc files
set viminfo='20,<1000,s1000             " increase copy and paste buffer size
set mouse=a                             " enable mouse support in xterm
if 0
    set scrolloff=999                   " always keep the cursor vertically centered
endif

if s:uname == "Linux"
    let g:python2_host_prog='/usr/bin/python2.7'
    let g:python3_host_prog='/usr/bin/python3.7'
elseif s:uname == "Darwin"
    let g:python2_host_prog='~/.pyenv/versions/2.7.16/bin/python'
    let g:python3_host_prog='/usr/local/bin/python3'
endif

" - enables filetype detection,
" - enables filetype-specific scripts (ftplugins),
" - enables filetype-specific indent scripts.
" Things like ctrl-w ctrl-] won't find custom ctag files without this
filetype plugin indent on

augroup AutoResize
    " Automatically resize splits when window is resized
    autocmd FocusGained,FocusLost,VimResized * wincmd =
augroup end

" Automatically set working directory to the folder of open file.
" Helps with things like syntastic/pylint, which look in parent folders for rc
" files

" if expand('%:t') =~ '\.py$'
"     set autochdir
" endif

let g:LargeFile = 1    " in megabytes
let g:LargeFile = g:LargeFile*1024*1024

fun! OptimizeLargeFile()
   let f = expand("<afile>")
   if getfsize(f) >= g:LargeFile
       let b:eikeep = &ei
       let b:ulkeep = &ul
       set ei = FileType
       setlocal noswf bh=unload
       let f = escape(substitute(f,'\','/','g'),' ')
       exe "au LargeFile BufEnter ".f." set ul=-1"
       exe "au LargeFile BufLeave ".f." let &ul=".b:ulkeep."|set ei=".b:eikeep
       exe "au LargeFile BufUnload ".f." au! LargeFile * ".f
       echomsg "***note*** handling a large file"
   endif
endfun

augroup LargeFile
    autocmd BufReadPre * call OptimizeLargeFile()
augroup END

" Indented folding
" Modified from http://dhruvasagar.com/2013/03/28/vim-better-foldtext
function! NeatFoldText()
    let indent_level = indent(v:foldstart)
    let indent = repeat(' ',indent_level)
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '-' . printf("%10s", lines_count . ' lines') . ' '
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return indent . foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()

" -----------------------------------------------------
" Backspace settings
"   indent  allow backspacing over autoindent
"   eol     allow backspacing over line breaks (join lines)
"   start   allow backspacing over the start of insert; CTRL-W and CTRL-U
"   0     same as ":set backspace=" (Vi compatible)
"   1     same as ":set backspace=indent,eol"
"   2     same as ":set backspace=indent,eol,start"
" -----------------------------------------------------

set bs=2

" -----------------------------------------------------
" Indentation  settings
" -----------------------------------------------------

set tabstop=4       " number of spaces a tab counts for
set shiftwidth=4    " control how many columns text is indented with the reindent operations (<< and >>) and automatic C-style indentation.
set expandtab       " Insert spaces when entering <Tab>
set softtabstop=4   " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.  It "feels" like a tab though
set ai              " auto indent

" Indentation per file type
au FileType javascript setl ts=4 sw=4 sts=4
au FileType python setl ts=4 sw=4 sts=4
au FileType cpp setl ts=4 sw=4 sts=4
au FileType hpp setl ts=4 sw=4 sts=4
au FileType sh setl ts=4 sw=5 sts=4

" Align function parameters that are on multiple lines
fun! UpdateArgIndent()
    if expand('%:t') =~ '\.cpp$' || expand('%:t') =~ '\.cc$' || expand('%:t') =~ '\.hpp$' || expand('%:t') =~ '\.h$' || expand('%:t') =~ '\.py$'
       set cino+=(0
    endif
endfun

augroup ArgIndent
    autocmd BufEnter * call UpdateArgIndent()
augroup END

" -----------------------------------------------------
" Look and feel
" -----------------------------------------------------

syn on            " syntax highlighting
set bg=dark       " set colors for dark background
" set termguicolors " true color
set nonumber      " don't display row numbers
set ruler         " display ruler
set vb t_vb=      " visual bell
set visualbell
set noerrorbells

" -----------------------------------------------------
" External commands
" -----------------------------------------------------

if s:uname == "Darwin"
    nnoremap <Leader>o :exe ':silent !open %'<CR>
endif

" FormatJSON to pretty print JSON
com! FormatJSON %!python -m json.tool

" -----------------------------------------------------
" Special syntax highlighting
" -----------------------------------------------------

fun! UpdateFileTypes()
    if expand('%:t') =~ '\.clang-format'
        set ft=yaml
    elseif expand('%:t') =~ '\.icc'
        set ft=cpp
    elseif expand('%:t') =~ '\.ravenscript'
        set ft=python
    endif
endfun

augroup FileTypeUpdate
    autocmd BufEnter * call UpdateFileTypes()
augroup END

augroup SyntaxHilightFix
    " Make sure syntax highlighting doesn't break when viewing from middle of a file
    autocmd BufEnter * :syntax sync fromstart
augroup END

" -----------------------------------------------------
" Wrapping per file type
" -----------------------------------------------------

augroup WrapLinePerFiletype
    autocmd!
    autocmd FileType org setlocal wrap
augroup END

" -----------------------------------------------------
" Line length highlight
" -----------------------------------------------------

fun! ShowLineLengthBoundary()
    if exists('w:overlength')
        call matchdelete(w:overlength)
        unlet w:overlength
    endif
    highlight OverLength ctermbg=52 guibg=#592929
    " Don't highlight on these filetypes
    if &ft =~ 'markdown\|text\|bash\|sh'
    elseif expand('%:t') !~ '\.'
        return
    elseif expand('%:t') =~ '\.vimrc$'
        return
    elseif expand('%:t') =~ '\.org$'
        return
    elseif expand('%:t') =~ '\.json$'
        return
    elseif expand('%:t') =~ '\.cpp$' || expand('%:t') =~ '\.cc$' || expand('%:t') =~ '\.hpp$' || expand('%:t') =~ '\.h$'
        let w:overlength = matchadd('OverLength', '\%>79v.\+')
    elseif expand('%:t') =~ '\.py$'
        let w:overlength = matchadd('OverLength', '\%>99v.\+')
    elseif expand('%:t') =~ '\.js$' || expand('%:t') =~ '\.ts$' || expand('%:t') =~ '\.html$'
        let w:overlength = matchadd('OverLength', '\%>119v.\+')
    " " No longer default to 120
    " else
    "    let w:overlength = matchadd('OverLength', '\%>120v.\+')
    endif
endfun

augroup LineLengthVis
    autocmd BufEnter * call ShowLineLengthBoundary()
augroup END

" -----------------------------------------------------
" Spell checking
" -----------------------------------------------------

setlocal spell spelllang=en_us

augroup SpellCheck
    autocmd BufRead,BufNewFile *.txt setlocal spell
    autocmd BufRead,BufNewFile *.md setlocal spell
augroup END

" -----------------------------------------------------
" Fold settings
"
"   fdm:
"     manual     Folds are created manually.
"     indent     Lines with equal indent form a fold.
"     expr       'foldexpr' gives the fold level of a line.
"     marker     Markers are used to specify folds.
"     syntax     Syntax highlighting items specify folds.
"     diff       Fold text that is not changed.
" -----------------------------------------------------

set fdm=marker
"set foldmethod=indent
"set foldlevelstart=0
" javascript folding doesn't work very well with several levels of nested anonymous functions
"let javaScript_fold=1         " JavaScript
"let php_folding=1             " PHP
let g:vim_markdown_folding_disabled=1

" -----------------------------------------------------
" Remove trailing whitespace from certain file types
" -----------------------------------------------------

fun! TrimTrailingWhitespace()
    if &ft =~ 'javascript\|html\|jade\|json\|css\|less\|php\|python\|sh\|c\|cpp\|markdown\|yaml\|vim'
        :%s/\s\+$//e
    elseif expand('%:t') =~ '\.gltf$' || expand('%:t') =~ '\.glsl$'
        :%s/\s\+$//e
    endif
endfun

augroup WhiteSpaceTrim
    autocmd BufWritePre * call TrimTrailingWhitespace()
augroup END

" -----------------------------------------------------
" Highlight unwanted text
" -----------------------------------------------------
"
" can't use "match" keyword directly as each usage overwrites the previous one,
" so use matchadd function, which can be called as much as needed

fun! HighlightTrailingWhitespace()
    if exists('w:trailingwhitespace')
        call matchdelete(w:trailingwhitespace)
        unlet w:trailingwhitespace
    endif
    highlight TrailingWhitespace ctermbg=red guibg=red
    if &ft == 'help'
        return
    else
        " TODO: This doesn't seem to highlight spaces after # comments in yaml files...
        let w:trailingwhitespace=matchadd('TrailingWhitespace', '\s\+$')
    endif
endfun

augroup TrailingWhitespaceHighlight
    autocmd BufEnter * call HighlightTrailingWhitespace()
augroup END

fun! HighlightTabs()
    if exists('w:extratabs')
        call matchdelete(w:extratabs)
        unlet w:extratabs
    endif
    highlight ExtraTabs ctermbg=red guibg=red
    if &ft == 'help'
        return
    else
        let w:extratabs=matchadd('ExtraTabs', '\t\+')
    endif
endfun

augroup TabHighlight
    autocmd BufEnter * call HighlightTabs()
augroup END

" -----------------------------------------------------
" Language specific settings
" -----------------------------------------------------

" Add include paths to support "gf" command
if findfile('.clang_complete', '.') == '.clang_complete'
    let &path .= system('get-clang-include-paths .clang_complete')
endif

" -----------------------------------------------------
" cscope settings
" -----------------------------------------------------

if has("cscope")
    set csprg=cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
endif

" -----------------------------------------------------
" Remember the last cursor location across sessions
" -----------------------------------------------------

function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" =====================================================
" SECTION: PLUGINS AND THEIR SETTINGS
" =====================================================

call plug#begin('~/.vim/bundle')

" -----------------------------------------------------
" Fuzzy file finding
" -----------------------------------------------------

" File search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Default command seems to hang in large codebases while opening the file
" let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore --no-messages --hidden --follow --glob "!.git/*"'
let $FZF_DEFAULT_COMMAND = 'rg --files --no-messages --glob "!.git/*"'

" Prevent content search from matching filenames
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit' }
nnoremap <c-p> :FZF<cr>
nnoremap <c-s> :Ag<cr>
nnoremap <c-m> :Buffers<cr>
" Other commands
" GFiles Buffers Colors Lines BLines Tags BTags Marks Windows History History:
" History/ Snippets Commits BCommits Commands Maps Helptags Filetypes

" Required by FuzzyFinder
Plug 'vim-scripts/L9'
" Fuzzy search of files, buffers, directories, MRU, tags, etc
Plug 'vim-scripts/FuzzyFinder'

" Another file search plugin that uses the quickfix window.
" Requires :UpdateRemovePlugins after install/upgrade
Plug 'shougo/denite.nvim'

" -----------------------------------------------------
" Tags
" -----------------------------------------------------

" TOO SLOW with large C++ code base
if 0
    " Utils needed by easytags
    Plug 'xolox/vim-misc'
    " create tags on file save
    Plug 'xolox/vim-easytags'

    let g:easytags_async = 1
endif

" Set default tag files
set tags=./tags;,tags;./TAGS;,TAGS;

" -----------------------------------------------------
" Tag bar
" -----------------------------------------------------

Plug 'majutsushi/tagbar'

" augroup AutoTagBar
"     " open Tagbar for supported files
"     autocmd BufEnter * nested :call tagbar#autoopen(0)
" augroup END

let g:tagbar_width = 31
nnoremap <leader>c :TagbarToggle<CR>

" configure tags for javascript
" let g:tagbar_ctags_bin = '~/node_modules/.bin/jsctags'
" let g:tagbar_type_javascript = { 'ctagsbin' : '~/node_modules/.bin/jsctags' }
" let g:tagbar_type_javascript = { 'ctagsbin' : '/Users/erahhal/node_modules/jsctags/bin/jsctags.js' }

" augroup TagBarOpen
"     autocmd FileType c,cpp,python,javascript,bash,sh,vim nested :TagbarOpen
" augroup END

" -----------------------------------------------------
" Live search highlighting
" -----------------------------------------------------

Plug 'haya14busa/incsearch.vim'

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" -----------------------------------------------------
" Ack grep replacement
" -----------------------------------------------------

Plug 'mileszs/ack.vim'

if s:uname == "Linux"
    let g:ackprg="ag --nocolor --nogroup --column"
elseif s:uname == "Darwin"
    let g:ackprg="ag --nocolor --nogroup --column"
endif

" -----------------------------------------------------
" Hierarchical file tree
" -----------------------------------------------------

Plug 'scrooloose/nerdtree'
" tab support
Plug 'jistr/vim-nerdtree-tabs'
" NERDTree integration with ack
Plug 'erahhal/nerdtree-ack'
" Git integration
Plug 'Xuyuanp/nerdtree-git-plugin'

let g:nerdtree_tabs_open_on_console_startup = 1
" Show hidden files
let NERDTreeShowHidden=1
nmap ,n :NERDTreeFind<CR>
nmap ,m :NERDTreeToggle<CR>
augroup NERDTree
    " Start NERDTreeTabs on launch
    autocmd vimenter * NERDTree
    " Make sure focus is on buffer
    autocmd VimEnter * wincmd p
augroup END

" -----------------------------------------------------
" Code commenting
" -----------------------------------------------------

" Type "gc" to comment
Plug 'tpope/vim-commentary'

" -----------------------------------------------------
" Automatic JSDoc generation
" -----------------------------------------------------

Plug 'joegesualdo/jsdoc.vim'

" -----------------------------------------------------
" Code delimiters
" -----------------------------------------------------

" Automatic closing quotes, brackets, etc
Plug 'doums/coBra'

" " This expands a carriage return into two, but doesn't always behave as expected
" let delimitMate_expand_cr = 2

" support surrounding tags (dst)
Plug 'tpope/vim-surround'
" cs"'       - change double quotes to single quotes
" cs'<q>     - change single quotes to html tags
" ds"        - delete surrounding quotes
" ysiw"      - surround word with double quotes
" ys$"       - surround to end of line with double quotes
" yss"       - surround entire sentence with quotes
" S"         - surround visual selection with quotes

" -----------------------------------------------------
" Autocompletion
" -----------------------------------------------------

" show function signatures
Plug 'Shougo/echodoc.vim'

" set noshowmode
set cmdheight=2 " gives room at bottom show function signature
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'popup'

" Always draw the signcolumn
set signcolumn=yes

" Not needed with coc
if 0
    " asynchronous completion
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
endif

" faster creation of HTML and CSS, handles expansion
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
if 0
    " asynchronous completion
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    let g:deoplete#enable_at_startup = 1
    " tern js plugin for deoplete
    Plug 'carlitux/deoplete-ternjs'
    " Better javascript completion
    Plug 'marijnh/tern_for_vim'

    augroup DisableAutoComplete
        " using clang_complete for c/cpp
        autocmd FileType c,cc,cpp,cxx,h,hh,hpp,hxx let b:deoplete_disable_auto_complete = 1
    augroup END
endif

" Required for operations modifying multiple buffers like rename.
set hidden

" Doesn't resolve URL-based es6 modules
" Also seems to choke easily and spam the display, corrupting it
if 0
  Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh',
      \ }

  " Make sure that "python-language-server" is installed and not "pyls"
  if s:uname == "Linux"
    let g:LanguageClient_serverCommands = {
        \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
        \ 'javascript': ['~/.yarn/bin/javascript-typescript-stdio'],
        \ 'javascript.jsx': ['~/.yarn/bin/javascript-typescript-stdio'],
        \ 'python': ['/usr/local/bin/pyls'],
        \ 'markdown': ['/usr/local/bin/pyls'],
        \ 'cpp': ['clangd-8'],
        \ }
  elseif s:uname == "Darwin"
    let g:LanguageClient_serverCommands = {
        \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
        \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
        \ 'javascript.jsx': ['/usr/local/bin/javascript-typescript-stdio'],
        \ 'python': ['/usr/local/bin/pyls'],
        \ 'markdown': ['/usr/local/bin/pyls'],
        \ 'cpp': ['clangd-8'],
        \ }
  endif

  let g:LanguageClient_selectionUI = 'location-list'
  " let g:LanguageClient_selectionUI = 'quickfix'

  function LC_maps()
      if has_key(g:LanguageClient_serverCommands, &filetype)
          nnoremap <F5> :call LanguageClient_contextMenu()<CR>
          " Or map each action separately
          nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
          nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
          nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
      endif
  endfunction

  augroup LCMaps
      autocmd FileType * call LC_maps()
  augroup END
endif

if 1
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'iamcco/coc-actions', {'do': 'yarn install --frozen-lockfile && yarn build'}
    Plug 'voldikss/coc-browser', {'do': 'yarn install --frozen-lockfile'}
    Plug 'clangd/coc-clangd', {'do': 'yarn install --frozen-lockfile'}
    Plug 'voldikss/coc-cmake', {'do': 'yarn install --frozen-lockfile'}
    Plug 'iamcco/coc-cspell-dicts', {'do': 'yarn install --frozen-lockfile && yarn build'}
    Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
    Plug 'Tallestthomas/coc-css-block-comments', {'do': 'yarn install --frozen-lockfile && yarn add webpack webpack-cli && yarn build'}
    Plug 'antonk52/coc-cssmodules', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-denite', {'do': 'yarn install --frozen-lockfile'}
    Plug 'josa42/coc-docker', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-git', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
    Plug 'fannheyward/coc-lit-html', {'do': 'yarn install --frozen-lockfile && yarn add webpack webpack-cli --dev && yarn build'}
    Plug 'fannheyward/coc-markdownlint', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-prettier', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}
    Plug 'josa42/coc-sh', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
    Plug 'iamcco/coc-spell-checker', {'do': 'yarn install --frozen-lockfile && yarn build'}
    Plug 'fannheyward/coc-sql', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-stylelint',  {'do': 'yarn install --frozen-lockfile'}
    Plug 'bmatcuk/coc-stylelintplus',  {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-tslint', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
    Plug 'coc-extensions/coc-utils', {'do': 'yarn install --frozen-lockfile && yarn compile'}
    Plug 'iamcco/coc-vimlsp', {'do': 'yarn install --frozen-lockfile && yarn build'}
    Plug 'fannheyward/coc-xml', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile'}

    " See here for examples and reference:
    " https://github.com/neoclide/coc.nvim/blob/master/README.md
    " https://github.com/neoclide/coc.nvim/blob/master/doc/coc.txt

    nmap <silent> ,a :CocCommand actions.open<CR>
    nmap <silent> ,f <Plug>(coc-fix-current)
    nmap <silent> ,k <Plug>(coc-diagnostic-prev)
    nmap <silent> ,j <Plug>(coc-diagnostic-next)
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> ,d <Plug>(coc-definition)
    nmap <silent> gr <Plug>(coc-references)
    nmap <silent> ,r <Plug>(coc-references)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> ,i <Plug>(coc-implementation)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> ,y <Plug>(coc-implementation)

    " Symbol renaming.
    nmap <leader>r <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    " Snippets
    imap <C-l> <Plug>(coc-snippets-expand)
    inoremap <silent><expr> <TAB>
        \ pumvisible() ? coc#_select_confirm() :
        \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
    let g:coc_snippet_next = '<tab>'
    let g:coc_snippet_prev = '<s-tab>'
    " let g:coc_snippet_next = '<c-j>'
    " let g:coc_snippet_prev = '<c-k>'
    " vmap <C-j> <Plug>(coc-snippets-select)
    " imap <C-j> <Plug>(coc-snippets-expand-jump)
endif

" Too many issues
if 0
    " -----------------------------------------------------
    " YouCompleteMe
    " -----------------------------------------------------
    Plug 'Valloric/YouCompleteMe'

    " These are the tweaks I apply to YCM's config, you don't need them but they might help.
    " YCM gives you popups and splits by default that some people might not like, so these should tidy it up a bit for you.
    " let g:ycm_add_preview_to_completeopt=0

    " Don't prompt to load ycm conf
    let g:ycm_confirm_extra_conf = 0
    " Default conf
    " let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
    " let g:ycm_collect_identifiers_from_tags_files = 1

    " Disable for C++ so that clang_completer can kick in.
    " YCM seems slow for clang completion, and also includes a lot more cruft in
    " autocomplete popup
    let g:ycm_filetype_blacklist = { 'cpp': 1, 'c': 1 }
    " Let syntastic handle c/c++ errors rather than YCM
    let g:ycm_show_diagnostics_ui = 0
endif

" **************
" clang_complete
" **************

Plug 'Rip-Rip/clang_complete'

" ctrl-x ctrl-u to get argument completion for member functions

if s:uname == "Linux"
    if s:ubuntu_version == "18.04"
        let g:clang_library_path='/usr/lib/llvm-6.0/lib'
    else
        let g:clang_library_path='/usr/lib/llvm-3.9/lib'
    endif
elseif s:uname == "Darwin"
    let cmd = "brew list llvm | sed -n 1p | sed 's/^\\(.*\\/llvm\\/[^/]*\\).*$/\\1/'"
    let g:clang_library_path = substitute(system(cmd), '\n\+$', '', '') . '/lib'
endif
let g:clang_auto_select = 1
" Complete macros
let g:clang_complete_macros = 1
" Complete code constructs like loops
let g:clang_complete_patterns = 1
let g:clang_snippets = 1
let g:clang_conceal_snippets = 1
" this seems to conflict with Ultisnips, causing 'Snippets engine ultisnips not found' error
" let g:clang_snippets_engine = 'ultisnips'
" let g:clang_debug = 1

" ***************************
" general completion settings
" ***************************

" The following two settings properly select argument completion
set concealcursor=vin
" Don't open preview window
set completeopt-=preview
" Needed for kite
set completeopt+=menuone,noinsert
" Popup menu height
set pumheight=20
"" Hides certain bits of text, like quotes in json files and brackets in markdown links
" set conceallevel=2

" *********
" UltiSnips
" *********

" Plug 'SirVer/ultisnips'
" Snippets are separated from the engine.
Plug 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" -----------------------------------------------------
" clang-format support
" -----------------------------------------------------

Plug 'rhysd/vim-clang-format'

augroup ClangFormat
    " map to <Leader>cf in C++ code
    autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
    autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
    " if you install vim-operator-user
    "autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
augroup END
" Toggle auto formatting:
"nmap <Leader>C :ClangFormatAutoToggle<CR>

" -----------------------------------------------------
" VCS Support
" -----------------------------------------------------
"
" Git wrapper
" :G<command> or :Git <command>    - run a git command
Plug 'tpope/vim-fugitive'

" git branch viewer
" :Flog or :Flogsplit       - open viewer (all commands below only work in viewer)
"       <C-N> and <C-P>     - jump between commits
"       u                   - refresh graph
"       a                   - toggle all branches
"       gb                  - toggle bisect mode
"       gm                  - toggle displaying no merges
"       gr                  - toggle reflog
"       gq                  - quit
"       g?                  - help
Plug 'rbong/vim-flog'

" Visual git management
Plug 'sodapopcan/vim-twiggy'

" Show diff marks
Plug 'mhinz/vim-signify'

let g:signify_vcs_cmds = {
    \ 'git': 'git diff --no-color --no-ext-diff -U0 master -- %f'
    \ }

highlight SignColumn ctermbg=237

" Magit
" :Magit            - open
" <C-n> an <C-p>    - jump between hunks
" S                 - stage a hunk
" CC                - commit staged hunks
" CC or :w          - finalize commit
Plug 'jreybert/vimagit'

" slow and conflicts with VimOrganizer
if 0
    " Show diff marks
    Plug 'airblade/vim-gitgutter'

    if exists(":GitGutterLineHighlightsEnable")
        augroup GitGutterHighlight
            autocmd VimEnter * GitGutterLineHighlightsEnable
        augroup END
    endif

    " compare against last ancestor commit before branch
    let g:gitgutter_diff_args = "`git merge-base HEAD master`"

    highlight GitGutterAddLine ctermbg=17
    highlight GitGutterChangeLine ctermbg=237
    " GitGutterDeleteLine       " default: links to DiffDelete
    " GitGutterChangeDeleteLine " default: links to GitGutterChangeLineDefault, i.e. DiffChange

    " " gitgutter solarized adjustments
    " highlight clear SignColumn
    " highlight link SignColumn CursorColumn
endif

" -----------------------------------------------------
" Diffing
" -----------------------------------------------------

" recursive multiple file diff
Plug 'vim-scripts/DirDiff.vim'

set diffexpr=MyDiff()
function MyDiff()
    let opt = ""
    if &diffopt =~ "icase"
        let opt = opt . "-i "
    endif
    if &diffopt =~ "iwhite"
        let opt = opt . "-b "
    endif
    silent execute "!diff -d -a --binary " . opt . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction

if &diff
    function! CheckDiff()
        if &modified
            diffupdate
        endif
    endfunction

    augroup CheckDiff
        autocmd CursorMoved * call CheckDiff()
    augroup END
endif

" -----------------------------------------------------
" Status line
" -----------------------------------------------------

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

let g:airline_powerline_fonts = 1

" -----------------------------------------------------
" File specific utilities
" -----------------------------------------------------

" set shiftwidth and expandtab automatically based on file or other files in the working directory
Plug 'tpope/vim-sleuth'

" -----------------------------------------------------
" Syntax Highlighting
" -----------------------------------------------------

" 100 language packs
Plug 'sheerun/vim-polyglot'

" CSound IDE support
Plug 'luisjure/csound-vim'

" saves present file, compiles with flags in options, returns to vim
:noremap <leader>ct :up <CR> :!csound "%:p" <CR>
" saves present file, compiles and sends to audio output, returns to vim
:noremap <leader>co :up <CR> :!csound -d -o devaudio "%:p" <CR> <CR>
" saves present file, compiles and writes output to file, returns to vim
:noremap <leader>cc :up <CR> :!csound -W -d -o "%:p:r.wav" "%:p" <CR> <CR>
" saves present file, compiles and writes output to file, stays in console (for debugging)
:noremap <leader>cs :up <CR> :!csound -W -d -o "%:p:r.wav" "%:p" <CR>
" plays last compiled file
:noremap <leader>cp :!aplay "%:p:r.wav" <CR><CR>

" mustache syntax highlighting and completion
Plug 'juvenn/mustache.vim'

" Allows for custom syntax highlighting in different parts of File
" Could add custom syntax highlighting for things like lit-HTML
Plug 'vim-scripts/SyntaxRange'

" Improved Javascript indentation and syntax support.
Plug 'pangloss/vim-javascript'

" Better markdown syntax highlighting, including code blocks
Plug 'plasticboy/vim-markdown'

let g:markdown_fenced_languages = [
    \ 'vim',
    \ 'help',
    \ 'html',
    \ 'python'
    \]

" -----------------------------------------------------
" Syntax Checking
" -----------------------------------------------------

if 0
    Plug 'w0rp/ale'

    let g:ale_linters = { 'cpp': ['clang', 'gcc'] }
    if s:uname == "Linux"
        let g:ale_javascript_eslint_executable = $HOME.'/.yarn/bin/eslint'
    elseif s:uname == "Darwin"
        let g:ale_javascript_eslint_executable = $HOME.'/npm-global/bin/eslint'
    endif
    if findfile('.clang_complete', '.') == '.clang_complete'
        let g:ale_cpp_clang_options = '$(get-clang-compile-options .clang_complete)'
    else
        let g:ale_cpp_clang_options = '-std=c++14 -stdlib=libc++ -isystem -I/usr/local/include -I/usr/include -I/usr/include/x86_64-linux-gnu'
        let g:ale_cpp_gcc_options = '-std=c++14 -stdlib=libc++ -isystem -I/usr/local/include -I/usr/include -I/usr/include/x86_64-linux-gnu'
    endif
    let g:ale_c_build_dir = "./build"
    let g:ale_c_parse_makefile = 1
    " This defaults to "normal", which doesn't lint on change for heavy things like clang
    let g:ale_link_on_text_changed = 'always'
    let g:ale_html_tidy_options = '--custom-tags blocklevel'
    let g:ale_python_flake8_options = '--max-line-length=100'
    let g:ale_python_pylint_options = '--max-line-length=100'

    nmap <silent> ,k <Plug>(ale_previous_wrap)
    nmap <silent> ,j <Plug>(ale_next_wrap)
endif

" Syntastic is not asynchronous
if 0
    Plug 'scrooloose/syntastic'
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    " let g:syntastic_debug = 1
    let g:syntastic_cpp_checkers = ['clang_check']
    " let g:syntastic_cpp_checkers = ['cppcheck']
    " let g:syntastic_cpp_checkers = ['gcc']
    " let g:syntastic_cpp_config_file = '.syntastic_cpp_config'
    let g:syntastic_javascript_checkers = ['eslint']
    " Must specify full path, since vim's 'executable' doesn't work in hidden paths
     let g:syntastic_javascript_eslint_exec = 'eslint'
    let g:syntastic_javascript_eslint_args = '--quiet'
    let g:syntastic_html_tidy_exec = 'tidy5 config ~/tidy-config.txt'
    let g:syntastic_html_tidy_ignore_errors = ['discarding unexpected <', '> is not recognized']
    let g:syntastic_html_checkers = ['tidy', 'eslint']
    " Must specify full path, since vim's 'executable' doesn't work in hidden paths
    let g:syntastic_html_eslint_exec = 'eslint'
    let g:syntastic_html_eslint_args = '--quiet'
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_python_pylint_post_args="--max-line-length=100"
endif

" -----------------------------------------------------
" General Editing Enhancements
" -----------------------------------------------------

" Dev Icons
Plug 'ryanoasis/vim-devicons'

let g:buffet_powerline_separators = 1
let g:buffet_tab_icon = "\uf00a"
let g:buffet_left_trunc_icon = "\uf0a8"
let g:buffet_right_trunc_icon = "\uf0a9"

" Separate workspaces
"   This function needs to be set before the vim-buffet plugin is loaded
function! g:BuffetSetCustomColors()
    " The colors seems to be set incorrectly with multiple tabs open
    " Black
    highlight! BuffetBuffer ctermfg=8 ctermfg=0
    " White
    highlight! BuffetCurrentBuffer ctermfg=8 ctermfg=7
    " White
    highlight! BuffetActiveBuffer ctermfg=8 ctermfg=7
endfunction
Plug 'bagrat/vim-buffet'

" Next buffer
noremap <Tab> :bn<CR>
" Previous buffer
noremap <S-Tab> :bp<CR>
" Close buffer
noremap <Leader><Tab> :Bw<CR>
noremap <Leader><S-Tab> :Bw!<CR>
" New tab
noremap <Leader>t :tabnew split<CR>

" a tree of undos
Plug 'mbbill/undotree'

nmap ,u :UndotreeToggle<CR>

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

" allows editing multiple lines simultaneous like Sublime
Plug 'hlissner/vim-multiedit'

" Quickly navigate around a file
" <leader><leader>w - jump to any word
" <leader><leader>b - jump to any word backwards
" <leader><leader>f<char> - jump to character
" <leader><leader>j - jump to lines below
" <leader><leader>k - jump to lines above
Plug 'Lokaltog/vim-easymotion'

Plug 'haya14busa/vim-easyoperator-line'

Plug 'haya14busa/vim-easyoperator-phrase'

" Doesn't work with NERDTree
if 0
    " Automatically resize panes on small screens
    Plug 'roman/golden-ratio'

    let g:golden_ratio_exclude_nonmodifiable = 1
    let b:golden_ratio_resizing_ignored = 1
    let g:golden_ratio_filetypes_blacklist = ["nerdtree", "unite"]
endif

" -----------------------------------------------------
" Tmux integration
" -----------------------------------------------------

" vim tmux integration
Plug 'christoomey/vim-tmux-navigator'

if has('nvim') && s:uname == "Darwin"
    " for some reason nvim doesn't map ctrl-h properly
    nmap <bs> :<c-u>TmuxNavigateLeft<cr>
endif

" Allow navigating out of NERDTree pane
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'

" vim tmux focus events
Plug 'tmux-plugins/vim-tmux-focus-events'

" -----------------------------------------------------
" Clipboard integration
" -----------------------------------------------------

set clipboard=unnamed,unnamedplus      " Set system clipboard as default
" Plug 'svermeulen/vim-easyclip'
" integration with tmux clipboard
Plug 'tmux-plugins/vim-tmux-focus-events'
" Make sure DISPLAY is available before enabling tmux clipboard
" integration, as it uses xsel or xclip in tmux.conf which seems to
" strip newlines when copying
if !empty($DISPLAY)
    Plug 'roxma/vim-tmux-clipboard'
endif

" -----------------------------------------------------
" Enhanced repeating
" -----------------------------------------------------

" use the . command
Plug 'tpope/vim-repeat'

" -----------------------------------------------------
" Date-time tools
" -----------------------------------------------------

" use ctrl-a and ctrl-x to to modify date
Plug 'tpope/vim-speeddating'

" -----------------------------------------------------
" Notational Velocity
" -----------------------------------------------------

Plug 'alok/notational-fzf-vim'

let g:nv_search_paths = ['~/Documents/org-mode']

nnoremap <c-n> :NV<cr>

" -----------------------------------------------------
" Org Mode
" -----------------------------------------------------

" Calendar.  Use ":Calendar" to launch
Plug 'mattn/calendar-vim'

" NarrowRegion. Narrowing (focusing on part of the buffer)
"
"    :NR           - Open the selected region in a new narrowed window
"    :NW           - Open the current visual window in a new narrowed window
"    :WidenRegion  - (In the narrowed window) write the changes back to the original buffer.
"    :NRV          - Open the narrowed window for the region that was last visually selected.
"    :NUD          - (In a unified diff) open the selected diff in 2 Narrowed windows
"    :NRP          - Mark a region for a Multi narrowed window
"    :NRM          - Create a new Multi narrowed window (after :NRP) - experimental!
"    :NRS          - Enable Syncing the buffer content back (default on)
"    :NRN          - Disable Syncing the buffer content back
"    :NRL          - Reselect the last selected region and open it again in a narrowed window
"
Plug 'chrisbra/NrrwRgn'

" Universal Text Linking
Plug 'vim-scripts/utl.vim'

if 0
    Plug 'hsitz/VimOrganizer'
    " ************
    " VimOrganizer
    " ************
    " Keybindings
    " https://github.com/hsitz/VimOrganizer/blob/master/doc/vimorg.txt
    " <enter>   new item
    " <tab>     expand/collapse
    " >>        indent
    " <<        unindent
    " ,m        mark/unmark (selection)
    " <,        Move heading tree up
    " >.        Move headng tree down
    " ,dd       enter DEADLINE date for headline
    " ,ds       enter SCHEDULED date for headline
    " ,dc       enter CLOSED date for headline
    " ,dt       enter timestamp date (i.e., no indicator) for headline
    " ,dg       set date at cursor
    " ,r        refile
    " ,le       add link
    " ,ln       next link
    " ,lp       previous link
    " ,ci       clock in
    " ,co       clock out

    fun! SetupOrg()
        call org#SetOrgFileType()
        " Override VimOrganizer keybinding
        noremap <buffer> <C-N> :NV<cr>
    endfun

    let g:agenda_files=["~/Documents/org-mode/agenda.org"]
    au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
    au BufEnter *.org call SetupOrg()
    command! OrgCapture :call org#CaptureBuffer()
    command! OrgCaptureFile :call org#OpenCaptureFile()
    let g:org_todo_setup='TODO WAITING | DONE'

    function! OrgCustomColors()
        "hi Folded ctermfg=255 ctermbg=017
        hi Folded ctermfg=255 ctermbg=000
        " various Org syntax item highlighting statements below
        " are the current defaults.  Uncomment and edit a line if you
        " want different highlighting for the element.

        " Below are defaults for any TODOS you define.  TODOS that
        " come before the | in a definition will use  'NOTDONETODO'
        " and those that come after are DONETODO
        hi! DONETODO guifg=green ctermfg=green
        hi! NOTDONETODO guifg=red ctermfg=lightred

        " Heading level highlighting is done in pairs, one for the
        " heading when unfolded and one for folded.  Default is to make
        " them the same except for the folded version being bold:
        " assign OL1 pair for level 1, OL2 pair for level 2, etc.
        "hi! OL1 guifg=somecolor guibg=somecolor
        "hi! OL1Folded guifg=somecolor guibg=somecolor gui=bold


        " Tags are lines below headings that have :colon:separated:tags:
        "hi! Org_Tag guifg=lightgreen ctermfg=blue

        "  Lines that begin with '#+' in column 0 are config lines
        "hi! Org_Config_Line guifg=darkgray ctermfg=magenta

        " Drawers are :PROPERTIES: and :LOGBOOK: lines and their associated
        " :END: lines
        "hi! Org_Drawer guifg=pink ctermfg=magenta
        "hi! Org_Drawer_Folded guifg=pink ctermfg=magenta gui=bold cterm=bold

        " This applies to value names in :PROPERTIES: blocks
        "hi! Org_Property_Value guifg=pink ctermfg=magenta

        " Three lines below apply to different kinds of blocks
        "hi! Org_Block guifg=#555555 ctermfg=magenta
        "hi! Org_Src_Block guifg=#555555 ctermfg=magenta
        "hi! Org_Table guifg=#888888 guibg=#333333 ctermfg=magenta

        " Dates are date specs between angle brackets (<>) or square brackets ([])
        "hi! Org_Date guifg=magenta ctermfg=magenta gui=underline cterm=underline

        " Org_Star is used to "hide" initial asterisks in a heading
        hi! Org_Star guifg=bg ctermfg=bg

        "hi! Props guifg=#ffa0a0 ctermfg=gray

        " Bold, italics, underline, and code are highlights applied
        " to character formatting
        "hi! Org_Code guifg=darkgray gui=bold ctermfg=14
        "hi! Org_Itals gui=italic guifg=#aaaaaa ctermfg=lightgray
        "hi! Org_Bold gui=bold guifg=#aaaaaa ctermfg=lightgray
        "hi! Org_Underline gui=underline guifg=#aaaaaa ctermfg=lightgray
        "hi! Org_Lnumber guifg=#999999 ctermfg=gray

        " These lines apply to links: [[link]], and [[link][link desc]]
        "if has("conceal")
        "    hi! default linkends guifg=blue ctermfg=blue
        "endif
        "hi! Org_Full_Link guifg=cyan gui=underline ctermfg=lightblue cterm=underline
        "hi! Org_Half_Link guifg=cyan gui=underline ctermfg=lightblue cterm=underline

        "  Applies to the Heading line that can be displayed in column view
        "highlight OrgColumnHeadings guibg=#444444 guifg=#aaaaaa gui=underline
    endfunction
endif

" Better plugin but too slow. Try it out again sometime
if 1
    Plug 'jceb/vim-orgmode'
    let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier', 'Statement', 'PreProc', 'Type', 'Special']
    " augroup VimOrgmode
    "     " Enabling reverting back to solarized causes a load flicker for every file that is loaded
    "     autocmd BufEnter *.org colorscheme solarized
    "     autocmd BufEnter *.org highlight Folded cterm=bold gui=bold
    " augroup END
    let g:org_agenda_files=["~/Documents/org-mode/agenda.org"]
endif

" -----------------------------------------------------
" Vim-wiki
" -----------------------------------------------------

Plug 'vimwiki/vimwiki'

let g:vimwiki_list = [{'path': '~/Documents/ellis/wiki/', 'index': 'index'}]

" -----------------------------------------------------
" Huge file handling
" -----------------------------------------------------

Plug 'mhinz/vim-hugefile'

" in MiB
let g:hugefile_trigger_size = 1

" -----------------------------------------------------
" Man page viewer
" -----------------------------------------------------

Plug 'vim-utils/vim-man'

" -----------------------------------------------------
" todo.txt helper
" -----------------------------------------------------

Plug 'freitass/todo.txt-vim'

" -----------------------------------------------------
" LLDB Debugging
" -----------------------------------------------------

" BROKEN - doesn't set breakpoints properly; Doesn't stop at breakpoints when set manually with just line number and filename
if 0
    Plug 'gilligan/vim-lldb'
endif

" BROKEN - doesn't set breakpoints properly; Doesn't stop at breakpoints when set manually with just line number and filename
if 0
    Plug 'critiqjo/lldb.nvim'
endif

" -----------------------------------------------------
" GDB Debugging
" -----------------------------------------------------

" UI kind of broken - loads things into NERDTree.  May be worth a revisit, for example turning off NERDTree when running
if 0
    Plug 'jimmysitu/pyclewn'
endif

" Pretty simple - doesn't do much beyond a normal debugger
if 0
    Plug 'vim-scripts/Conque-GDB'
    " 1: strip color after 200 line, 2: always with color
    let g:ConqueTerm_Color=2
    " close conque when program ends running
    let g:ConqueTerm_CloseOnEnd=1
    " display warning message if conqueTerm is configed incorrect
    let g:ConqueTerm_StartMessages=1
endif

" Disabled as it overrides <leader>t which I want to use for creating workspaces
if 0
    " Dependency for vim-vebugger
    Plug 'Shougo/vimproc.vim'
    " Only debugger that seems to work at all, but very shitty
    Plug 'idanarye/vim-vebugger'

    let g:vebugger_leader='<Leader>'
endif

" -----------------------------------------------------
" Integrated Terminal
" -----------------------------------------------------

Plug 'voldikss/vim-floaterm'
" Example command:
" FloatermNew height=0.6 width=0.4 wintype='floating' name='floaterm1' position='topleft' ranger --cmd="cd ~"
let g:floaterm_keymap_toggle    = '<leader>b'
" let g:floaterm_keymap_new       = '<leader>g'
" let g:floaterm_keymap_prev      = '<F8>'
" let g:floaterm_keymap_next      = '<F9>'

" -----------------------------------------------------
" Color Schemes
" -----------------------------------------------------

Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
Plug 'sainnhe/gruvbox-material'
Plug 'aliou/moriarty.vim'
Plug 'roosta/srcery'
Plug 'shaond/vim-guru'
Plug 'sjl/badwolf'
Plug '29decibel/codeschool-vim-theme'
Plug 'vim-scripts/phd'
Plug 'cocopon/iceberg.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'challenger-deep-theme/vim'
Plug 'junegunn/seoul256.vim'
Plug 'nanotech/jellybeans.vim'

call plug#end()
" -----------------------------------------------------
" Color Scheme Config (Must be located AFTER plug#end()
" -----------------------------------------------------

" let g:solarized_termcolors=256   " only needed if terminal is not solarized
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
elseif s:uname == 'Linux'
    set t_Co=256
endif
try
    " colorscheme solarized
    colorscheme gruvbox
    " colorscheme challenger_deep
    " colorscheme iceberg
    " colorscheme seoul256
    " colorscheme jellybeans
catch /^Vim\%((\a\+)\)\=:E185/
    " deal with it
endtry

" Diff colors
" cterm - style, cterfg - text color, ctermbg - highlighting
" DiffAdd - added line
" highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffAdd    cterm=bold ctermfg=15 ctermbg=22 gui=none guifg=bg guibg=Red
" DiffDelete - removed line
" highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=15 ctermbg=52 gui=none guifg=bg guibg=Red
" DiffChange - changed line
" highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=223 ctermbg=239 gui=none guifg=bg guibg=Red
" DiffText - part of line that changed
" highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=15 ctermbg=124 gui=none guifg=bg guibg=Red

" floating terminal colors
highlight FloatermNF ctermbg=black
highlight FloatermBorderNF ctermbg=black ctermfg=22

" -----------------------------------------------------
" Denite Config (Must be located AFTER plug#end()
" since Denite is a remote plugin.
" -----------------------------------------------------

call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" =====================================================
" END OF PLUGIN SECTION
" =====================================================
